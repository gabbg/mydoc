# chapter 1 运维的本质## p4微服务架构复杂到一定程度，已经远远超出单纯的开发和单纯的运维职责范畴，也远远超出了单纯的人力认知掌控范围，所以必须寻求在此架构之上的更为有效和统一的技术解决方案，来解决复杂度认知的问题。在这一套统一的技术解决方案之上，开发和运维进而产生了新的职责分工和协作方式。## p9应用模型建立1 应用业务模型，就是每个应用对外提供的业务服务能力。2 应用管理模型，就是应用的各种自身的属性，如名称，责任人，代码地址，部署结构，启停方式，监控检测等。3 应用依赖，分两部分资源，应用所必须的资源载体。比如服务器，LB，DNS等。基础组件，也就是中间件体系。比如数据库，缓存，消息队列，存储。>> 这个逻辑是根据应用对外提供业务，自身，最后是依赖，也就是数据流的上游，自身处理，下游的顺序。# chapter 2 运维体系建设## p16标准化的过程实际上就是对运维对象的识别和建模过程。形成统一的对象模型后，各方在统一的认识下展开有效协作；然后针对不同的运维对象，抽取出他们对应的运维场景；接下来才是运维场景的自动化实现。## p17标准化的步骤1、识别对象。2、识别对象属性。3、识别对象关系。4、识别对象场景。## p19应用层面的标准化1、识别对象：应该在代码设计实现阶段就被识别和确认。2、识别对象属性：- 元数据。关键是应用名，还有owner、功能描述等。- 代码属性。关键是语言和版本，还有git地址。- 部署模式。涉及基础软件包，如java、C#的语言环境包；tomcat、apache等基础web服务。- 应用目录。运维脚本目录，日志目录，应用包目录等。- 运行脚本。启停脚本，健康监控脚本。- 运行时参数配置。运行端口等。3、识别对象关系。- 与基础设施相关，如vip，dns等。- 与平行层面的应用，对外提供的api服务，依赖服务。- 与中间件，如数据库，缓存，消息队列等。4、识别运维场景。- 应用创建；持续集成和发布；扩容、监控。- 容量评估；压测；限流降级。## p26~28基础架构的服务化，一般基础中间件只提供了简单的维护功能，还有很多是命令行层面的维护。这时就需要对这些组件提供的API进行封装，以提供更加便捷的运维能力。服务化过程也就是PaaS化的过程。服务化的目标是平台自助化，让开发人员依赖平台的能力自主完成对基础组件的需求，而不是依赖运维人员。这件事情是驱动运维转型和改进的动力，也是运维能够深入了解架构组件细节的有效途径。## p30应用生命周期1、创建阶段- 确认应用的基础信息和基础服务的关系- 对同一类的应用可以固话成模板2、研发阶段- 打造完善的持续集成体系和工具链支持3、上线阶段- 持续迭代4、运行阶段- 应用本身及其相关联的基础服务的各项运行指标（SLI、SLO、SLA）- 能够对上面所述指标进行监控和报警的体系5、销毁阶段> SLI （Service Level Indicator）：经过仔细定义的测量指标，SLI的确定需要回答以下几个问题：要测量的指标是什么？测量时的系统状态？如何汇总处理测量的指标？测量指标能否准确描述服务质量？测量指标的可靠度(trustworthy)？In information technology, a Service Level Indicator (SLI) is a measure of the service level provided by a service provider to a customer. SLIs form the basis of Service Level Objectives (SLOs), which in turn form the basis of Service Level Agreements (SLAs);[1] an SLI is thus also called an SLA metric.Common SLIs include latency, throughput, availability, and error rate; others include durability (in storage systems), end-to-end latency (for complex data processing systems, especially pipelines), and correctness.[1]SLO（service level objective）：指定了服务所提供功能的一种期望状态。SLO里面应该包含所有能够描述服务应该提供什么样功能的信息。SLOs must be:AttainableRepeatableMeasurableUnderstandableMeaningfulControllableAffordableMutually acceptableSLA（service level agreement）：是一个涉及2方的合约，双方必须都要同意并遵守这个合约。当需要对外提供服务时，SLA是非常重要的一个服务质量信号，需要产品和法务部门的同时介入。SLA用一个简单的公式来描述就是： SLA = SLO + 后果# chapter 3 配置管理数据库 CMDB## p42CMDB是面向资源的管理，是运维的基石- 把服务器、网络、IDC等几大维度先定下来- 把这些硬件的属性定下来。- 梳理以上信息的关联关系- 基于这些信息的流程规范建设- 拓朴关系的可视化和动态显示## p43应用配置管理是面向应用的观念，是运维的核心。> 参考上面的“应用层面的标准化”应用名关联着应用配置信息，IP关联的资源信息，两者通过“应用名-ip”的对应关系，关联到一起。## p49应用的集群服务分组建设- 多环境问题。开发联调环境、集成测试环境、预发环境、线上环境等等。- 多IDC问题。业务单元化，海外业务拓展需求。（IDC：Internet Data Center，互联网数据中心）- 多服务分组。根据具体业务场景区分。## p51CMDB保存的对应关系：应用 - 集群服务分组 - 资源# chapter 4 运维组织架构及模式## p56运维能力的体现，一定是整体技术架构能力的体现。## p57研发团队的目标：效率、稳定、成本。运维契合价值的五件事：1、运维基础平台体系建设。标准化体系，CMDB、应用配置管理、DNS域名管理、资源管理。是运维的基础和核心。2、分布式中间件的服务化建设。基于开源产品的二次开发、或中间件产品的自研。3、持续交付体系建设。持续交付是连接运维和业务开发的关键纽带。开发和运维的矛盾比较容易在这个过程爆发。4、稳定性体系建设。快速发现问题、快速定位、快速恢复业务；加强日常演练。5、技术运营体系建设。确保指定的标准和流程能够落地。## p61运维团队的四个岗位：- 基础运维：包括IDC运维、硬件运维、系统运维以及网络运维- 应用运维：主要是业务和基础服务层面的稳定性保障和容量规划等工作。- 数据运维：数据库、缓存、大数据- 运维开发：提供效率和稳定性层面的工具开发